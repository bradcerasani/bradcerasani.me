---
import fs from 'node:fs/promises';
import path from 'node:path';
import { getCollection } from 'astro:content';
import sharp from 'sharp';
import { Header, Hero, Pagination } from 'src/components';
import Image from 'src/components/RawImage.astro';
import Layout from 'src/layouts/Layout.astro';
import 'src/styles/code-blocks.css';
import 'src/styles/footnotes.css';
import { filterEntriesByStatus, isImage, mapEntryEssentials, sortEntriesByDate } from 'src/utils';

export async function getStaticPaths() {
  const writing = await getCollection('writing');
  const projects = await getCollection('projects');
  const sortedEntries = sortEntriesByDate([...writing, ...projects]);
  const liveEntries = filterEntriesByStatus(sortedEntries, 'live');
  const entries = mapEntryEssentials(liveEntries);

  const paths = await Promise.all(
    liveEntries.map(async (entry, index) => {
      const prev = liveEntries[index + 1] || null;
      const next = liveEntries[index - 1] || null;
      const slug = `${entry.collection}/${entry.slug}`;
      const image = entry.data?.image;

      if (image) {
        try {
          const imagePath = path.resolve(process.cwd(), 'src/content', slug, image);
          const pathWithoutExtension = imagePath.slice(0, imagePath.lastIndexOf('.'));
          const extension = imagePath.slice(imagePath.lastIndexOf('.'));
          const newFilePath = `${pathWithoutExtension}-bw${extension}`;

          if (
            !(await fs
              .stat(newFilePath)
              .then(() => true)
              .catch(() => false))
          ) {
            const buffer = await fs.readFile(imagePath);
            await sharp(buffer).modulate({ brightness: 0.6 }).grayscale().toFile(newFilePath);
          }
        } catch (error) {
          console.error(`Failed to generate hero image for ${slug}:`, error);
        }
      }

      return {
        params: { slug },
        props: { entry, prev, next, entries },
      };
    })
  );

  return paths;
}

const { entry, prev, next, entries } = Astro.props;
const { image, description, title, skipHero } = entry.data;
const showHero: boolean = isImage(image ?? '') && !skipHero;
const { Content } = await entry.render();
---

<Layout
  metaTitle={title}
  metaDescription={description}
  metaImage={image}
  metaSlug={`/${entry.collection}/${entry.slug}`}
>
  <Header headline={title} entries={entries} client:idle />

  {
    showHero && (
      <Hero description={description}>
        <Image
          src={image?.replace('.jpg', '-bw.jpg')}
          alt={description}
          sizes="100vw"
          quality="60"
          widths={[320, 480, 768, 1024, 1280, 1600, 1920, 2560, 3840, 5120]}
        />
      </Hero>
    )
  }

  <main>
    <article>
      <h2 class="u-visuallyHidden">{title}</h2>
      <Content />
    </article>
  </main>

  <Pagination prev={prev} next={next} />
</Layout>
